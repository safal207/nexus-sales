#!/usr/bin/env python3
"""
MONITORING CONSCIOUSFUNNELS
–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import urllib.request
import urllib.error
import json
import time
import sys
import argparse
from datetime import datetime

class AppMonitor:
    def __init__(self, base_url: str = 'http://localhost:3000', interval: int = 30):
        self.base_url = base_url
        self.interval = interval
        self.last_status = {}
        self.start_time = datetime.now()

    def check_endpoint(self, path: str, method: str = 'GET', data: dict = None) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ endpoint"""
        try:
            if method == 'POST' and data:
                req = urllib.request.Request(
                    f"{self.base_url}{path}",
                    data=json.dumps(data).encode(),
                    headers={'Content-Type': 'application/json'},
                    method='POST'
                )
                response = urllib.request.urlopen(req, timeout=5)
            else:
                response = urllib.request.urlopen(f"{self.base_url}{path}", timeout=5)

            return {
                'status': 'ok',
                'http_code': response.status,
                'response_time': 0,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                'message': f"HTTP {response.status}"
            }
        except urllib.error.HTTPError as e:
            return {
                'status': 'error',
                'http_code': e.code,
                'message': f"HTTP Error: {e.code}"
            }
        except Exception as e:
            return {
                'status': 'error',
                'message': f"Connection Error: {str(e)}"
            }

    def check_all_endpoints(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö endpoints"""
        results = {}

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pages = ['/', '/login', '/register', '/auth/forgot-password']
        for page in pages:
            results[f"page{page}"] = self.check_endpoint(page)

        # API endpoints
        api_endpoints = [
            '/api/health',
            '/api/products',
        ]
        for api in api_endpoints:
            results[f"api{api.replace('/', '_')}"] = self.check_endpoint(api)

        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        login_data = {'email': 'test@test.com', 'password': 'password123'}
        results['api_auth_login'] = self.check_endpoint('/api/auth/login', 'POST', login_data)

        return results

    def format_status_line(self, name: str, status: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        if status['status'] == 'ok':
            return f"‚úÖ {name}: {status['message']}"
        else:
            return f"‚ùå {name}: {status['message']}"

    def run_continuous_monitoring(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        print('[*] –ú–û–ù–ò–¢–û–†–ò–ù–ì CONSCIOUSFUNNELS')
        print(f"[*] URL: {self.base_url}")
        print(f"[*] –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval} —Å–µ–∫")
        print(f"[*] –ù–∞—á–∞–ª–æ: {self.start_time.strftime('%H:%M:%S')}")
        print('=' * 60)

        cycle_count = 0
        errors_total = 0

        try:
            while True:
                cycle_count += 1
                cycle_start = datetime.now()

                print(f"\nüîÑ –¶–∏–∫–ª #{cycle_count} - {cycle_start.strftime('%H:%M:%S')}")

                results = self.check_all_endpoints()
                errors_cycle = 0

                # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                for name, status in results.items():
                    print(self.format_status_line(name, status))
                    if status['status'] != 'ok':
                        errors_cycle += 1

                errors_total += errors_cycle

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞
                cycle_time = (datetime.now() - cycle_start).total_seconds()
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ü–∏–∫–ª–∞: {cycle_time:.1f} —Å–µ–∫")
                print(f"‚ùå –û—à–∏–±–æ–∫ –≤ —Ü–∏–∫–ª–µ: {errors_cycle}")
                print(f"üìä –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {errors_total}")

                # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                time.sleep(self.interval)

        except KeyboardInterrupt:
            print(f"\n[*] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.print_final_stats(cycle_count, errors_total)

    def run_single_check(self):
        """–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"""
        print('[*] SINGLE CHECK CONSCIOUSFUNNELS')
        print(f"[*] URL: {self.base_url}")
        print(f"[*] –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
        print('=' * 60)

        results = self.check_all_endpoints()
        errors = 0

        for name, status in results.items():
            print(self.format_status_line(name, status))
            if status['status'] != 'ok':
                errors += 1

        print('=' * 60)
        if errors == 0:
            print('üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
            return True
        else:
            print(f'‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {errors}')
            return False

    def print_final_stats(self, cycles: int, errors: int):
        """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        runtime = datetime.now() - self.start_time
        print('=' * 60)
        print('üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        print(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {cycles}")
        print(f"‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {errors}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime}")
        if cycles > 0:
            print(f"üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞: {runtime.total_seconds() / cycles:.2f} —Å–µ–∫")

        if errors == 0:
            print('üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –±–µ–∑ –æ—à–∏–±–æ–∫!')
        else:
            print('‚ö†Ô∏è  –ë—ã–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –æ—à–∏–±–∫–∏')

def main():
    parser = argparse.ArgumentParser(description='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ConsciousFunnels')
    parser.add_argument('--url', default='http://localhost:3000', help='–ë–∞–∑–æ–≤—ã–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
    parser.add_argument('--interval', type=int, default=30, help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    parser.add_argument('--single', action='store_true', help='–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–º–µ—Å—Ç–æ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞')

    args = parser.parse_args()

    monitor = AppMonitor(args.url, args.interval)

    try:
        if args.single:
            result = monitor.run_single_check()
            sys.exit(0 if result else 1)
        else:
            monitor.run_continuous_monitoring()
    except Exception as e:
        print(f"[ERROR] Critical error: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
