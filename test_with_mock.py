#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° MOCK –°–ï–†–í–ï–†–û–ú
–ó–∞–ø—É—Å–∫–∞–µ—Ç mock —Å–µ—Ä–≤–µ—Ä –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–º –ø–æ—Ä—Ç—É –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –µ–≥–æ
"""

import subprocess
import sys
import time
import signal
import os
from typing import Optional

class MockTester:
    def __init__(self):
        self.mock_process: Optional[subprocess.Popen] = None
        self.port = self.find_available_port()

    def find_available_port(self) -> int:
        """–ù–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ—Ä—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ [3000, 3001, 3002]"""
        import socket
        ports = [3000, 3001, 3002]

        for port in ports:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex(('127.0.0.1', port))
                sock.close()
                if result != 0:  # –ü–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
                    return port
            except:
                continue

        return 3000  # fallback

    def start_mock_server(self) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å mock —Å–µ—Ä–≤–µ—Ä –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–º –ø–æ—Ä—Ç—É"""
        print(f"üß™ –ó–∞–ø—É—Å–∫ mock —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {self.port}...")

        try:
            self.mock_process = subprocess.Popen(
                [sys.executable, 'mock_server.py', str(self.port)],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                creationflags=subprocess.CREATE_NEW_PROCESS_GROUP if sys.platform != 'win32' else 0
            )

            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ mock —Å–µ—Ä–≤–µ—Ä–∞...")
            time.sleep(3)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            return self.check_mock_health()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ mock —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False

    def check_mock_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ mock —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç"""
        try:
            import urllib.request
            response = urllib.request.urlopen(f'http://localhost:{self.port}/', timeout=5)
            if response.status == 200:
                print(f"‚úÖ Mock —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{self.port}")
                return True
            else:
                print(f"‚ùå Mock —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                return False
        except Exception as e:
            print(f"‚ùå Mock —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
            return False

    def stop_mock_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å mock —Å–µ—Ä–≤–µ—Ä"""
        if self.mock_process:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ mock —Å–µ—Ä–≤–µ—Ä–∞...")
            try:
                if sys.platform == 'win32':
                    self.mock_process.terminate()
                    time.sleep(1)
                    if self.mock_process.poll() is None:
                        self.mock_process.kill()
                else:
                    os.killpg(os.getpgid(self.mock_process.pid), signal.SIGTERM)
                    time.sleep(1)
                    if self.mock_process.poll() is None:
                        os.killpg(os.getpgid(self.mock_process.pid), signal.SIGKILL)
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ mock —Å–µ—Ä–≤–µ—Ä–∞: {e}")

            self.mock_process = None

    def run_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –Ω–∞ mock —Å–µ—Ä–≤–µ—Ä–µ"""
        print(f"üß™ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É {self.port}...")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        os.environ['TEST_PORT'] = str(self.port)

        try:
            result = subprocess.run([
                sys.executable, 'check_app.py', f'http://localhost:{self.port}'
            ], capture_output=True, text=True, timeout=60)

            print("üìù –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
            print(result.stdout)

            if result.stderr:
                print("‚ö†Ô∏è  –û–®–ò–ë–ö–ò:")
                print(result.stderr)

            return result.returncode == 0

        except subprocess.TimeoutExpired:
            print("‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
            return False
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° MOCK –°–ï–†–í–ï–†–û–ú')
    print('=' * 50)
    print('–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    print('—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º mock —Å–µ—Ä–≤–µ—Ä–∞ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.')
    print()

    tester = MockTester()

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º mock —Å–µ—Ä–≤–µ—Ä
        if not tester.start_mock_server():
            print("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å mock —Å–µ—Ä–≤–µ—Ä")
            return 1

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        test_success = tester.run_tests()

        if test_success:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return 0
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return 1

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    finally:
        tester.stop_mock_server()

if __name__ == '__main__':
    sys.exit(main())
