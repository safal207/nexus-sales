// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  products  Product[]

  @@map("users")
}

model Product {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  name        String
  description String?
  price       Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]

  @@index([userId])
  @@map("products")
}

model Order {
  id        String     @id @default(uuid())
  productId Int?       @map("product_id")
  email     String
  name      String?
  status    OrderStatus
  amount    Int
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  product   Product?   @relation(fields: [productId], references: [id], onDelete: SetNull)
  payments  Payment[]

  @@index([productId])
  @@map("orders")
}

enum OrderStatus {
  created
  processing
  paid
  refunded
  cancelled
}

model Payment {
  id              String   @id @default(uuid())
  orderId         String   @map("order_id")
  stripePaymentId String   @unique @map("stripe_payment_id")
  amount          Int
  currency        String   @default("usd")
  status          PaymentStatus
  metadata        Json?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([stripePaymentId])
  @@map("payments")
}

enum PaymentStatus {
  pending
  succeeded
  failed
  refunded
}
