/**
 * ü§ñ Emotion Analysis Service
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Hugging Face –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */

export interface EmotionResult {
  emotions: Array<{
    label: string;
    score: number;
  }>;
  dominantEmotion: string;
  confidence: number;
  intensity: number;
  recommendations: string[];
}

export interface EmotionAnalysisInput {
  text: string;
  context?: string;
  userId?: string;
}

interface HuggingFaceEmotion {
  label: string;
  score: number;
}

type HuggingFaceAPIResponse = HuggingFaceEmotion[][];

class EmotionAnalysisService {
  private hfApiKey: string;
  private modelId: string = 'cardiffnlp/twitter-roberta-base-emotion-multilabel-latest';

  constructor() {
    this.hfApiKey = process.env.NEXT_PUBLIC_HUGGINGFACE_API_KEY || '';
  }

  async analyzeEmotion(input: EmotionAnalysisInput): Promise<EmotionResult> {
    try {
      // 2025-09-29 - Gemini: Switching to real Hugging Face API call
      // If API key is not available, use mock data as a fallback.
      if (!this.hfApiKey) {
        console.warn('Hugging Face API key not found. Using mock emotion analysis.');
        const mockResult = await this.getMockEmotionAnalysis(input);
        this.trackEmotionEvent(input, mockResult);
        return mockResult;
      }

      const result = await this.analyzeWithHuggingFace(input);

      // Track emotion detection
      this.trackEmotionEvent(input, result);

      return result;

    } catch (error) {
      console.error('Error in emotion analysis service:', error);

      // Fallback to neutral emotion in case of any error
      return {
        emotions: [{ label: 'neutral', score: 0.5 }],
        dominantEmotion: 'neutral',
        confidence: 0.5,
        intensity: 0.3,
        recommendations: ['–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.']
      };
    }
  }

  private async getMockEmotionAnalysis(input: EmotionAnalysisInput): Promise<EmotionResult> {
    // Mock emotion analysis based on text content
    const text = input.text.toLowerCase();

    let emotions = [];
    let dominantEmotion = 'neutral';
    let confidence = 0.6;
    let intensity = 0.5;

    // Simple keyword-based emotion detection
    if (text.includes('–æ—Ç–ª–∏—á–Ω–æ') || text.includes('—Å—É–ø–µ—Ä') || text.includes('–∫–ª–∞—Å—Å')) {
      dominantEmotion = 'joy';
      emotions = [
        { label: 'joy', score: 0.8 },
        { label: 'optimism', score: 0.6 }
      ];
      confidence = 0.8;
      intensity = 0.7;
    } else if (text.includes('–ø—Ä–æ–±–ª–µ–º') || text.includes('–æ—à–∏–±–∫') || text.includes('–Ω–µ —Ä–∞–±–æ—Ç–∞')) {
      dominantEmotion = 'sadness';
      emotions = [
        { label: 'sadness', score: 0.7 },
        { label: 'anger', score: 0.4 }
      ];
      confidence = 0.7;
      intensity = 0.6;
    } else if (text.includes('—Å–ø–∞—Å–∏–±–æ') || text.includes('–±–ª–∞–≥–æ–¥–∞—Ä') || text.includes('–ø–æ–º–æ–≥–ª')) {
      dominantEmotion = 'gratitude';
      emotions = [
        { label: 'joy', score: 0.6 },
        { label: 'love', score: 0.5 }
      ];
      confidence = 0.8;
      intensity = 0.6;
    } else if (text.includes('–Ω–µ –ø–æ–Ω–∏–º–∞—é') || text.includes('—Å–ª–æ–∂–Ω–æ') || text.includes('–∑–∞–ø—É—Ç–∞–Ω')) {
      dominantEmotion = 'confusion';
      emotions = [
        { label: 'fear', score: 0.5 },
        { label: 'sadness', score: 0.4 }
      ];
      confidence = 0.6;
      intensity = 0.5;
    } else {
      // Default neutral response
      emotions = [{ label: 'neutral', score: 0.6 }];
    }

    const recommendations = this.generateRecommendations(dominantEmotion, input.context);

    return {
      emotions,
      dominantEmotion,
      confidence,
      intensity,
      recommendations
    };
  }

  private generateRecommendations(emotion: string, _context?: string): string[] {
    const recommendations: Record<string, string[]> = {
      joy: [
        '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π',
        '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º',
        '–†–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã'
      ],
      sadness: [
        '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
        '–£–ø—Ä–æ—Å—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏',
        '–î–∞–π—Ç–µ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ'
      ],
      anger: [
        '–ò–∑–≤–∏–Ω–∏—Ç–µ—Å—å –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞',
        '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ',
        '–û–±–µ—Å–ø–µ—á—å—Ç–µ –±—ã—Å—Ç—Ä—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É'
      ],
      confusion: [
        '–î–∞–π—Ç–µ —á–µ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
        '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –¥–µ–º–æ –∏–ª–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª',
        '–£–ø—Ä–æ—Å—Ç–∏—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'
      ],
      fear: [
        '–£—Å–ø–æ–∫–æ–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        '–î–∞–π—Ç–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞',
        '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥'
      ],
      neutral: [
        '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
        '–ó–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
        '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é'
      ]
    };

    return recommendations[emotion] || recommendations.neutral || [];
  }

  private trackEmotionEvent(input: EmotionAnalysisInput, result: EmotionResult) {
    // Track emotion detection event
    if (typeof window !== 'undefined') {
      // In real app, this would send to analytics service
      console.log('Emotion detected:', {
        userId: input.userId,
        context: input.context,
        dominantEmotion: result.dominantEmotion,
        confidence: result.confidence,
        timestamp: new Date().toISOString()
      });
    }
  }

  // Public method for real Hugging Face integration
  async analyzeWithHuggingFace(input: EmotionAnalysisInput): Promise<EmotionResult> {
    if (!this.hfApiKey) {
      throw new Error('Hugging Face API key not configured');
    }

    const response = await fetch(
      `https://api-inference.huggingface.co/models/${this.modelId}`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.hfApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          inputs: input.text,
          options: { wait_for_model: true }
        })
      }
    );

    if (!response.ok) {
      throw new Error(`Hugging Face API error: ${response.status}`);
    }

    const data = (await response.json()) as HuggingFaceAPIResponse;

    // Process Hugging Face response
    const emotions: HuggingFaceEmotion[] = data[0] || [];
    const dominantEmotion = emotions.reduce((prev, current) =>
      prev.score > current.score ? prev : current
    );

    const recommendations = this.generateRecommendations(dominantEmotion.label);

    return {
      emotions,
      dominantEmotion: dominantEmotion.label,
      confidence: dominantEmotion.score,
      intensity: Math.min(dominantEmotion.score * 1.5, 1), // Scale intensity
      recommendations
    };
  }
}

// Export singleton instance
export const emotionAnalysisService = new EmotionAnalysisService();
