#!/usr/bin/env python3
"""
üß™ MOCK –°–ï–†–í–ï–† –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤
"""

import http.server
import socketserver
import json
import threading
import time
import sys

class MockHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b'<html><body><h1>ConsciousFunnels Mock Server</h1></body></html>')

        elif self.path == '/login':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b'<html><body><h1>Login Page</h1></body></html>')

        elif self.path == '/register':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b'<html><body><h1>Register Page</h1></body></html>')

        elif self.path == '/auth/forgot-password':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b'<html><body><h1>Forgot Password Page</h1></body></html>')

        elif self.path == '/api/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'status': 'ok', 'message': 'Mock server is healthy'}).encode())

        elif self.path == '/api/products':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'products': [{'id': 1, 'name': 'Test Product'}]}).encode())

        else:
            self.send_response(404)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'error': 'Not found'}).encode())

    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/api/auth/login':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'success': True, 'message': 'Mock login successful'}).encode())

        elif self.path == '/api/auth/register':
            self.send_response(201)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'success': True, 'message': 'Mock registration successful'}).encode())

        elif self.path == '/api/auth/forgot-password':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'success': True, 'message': 'Mock password reset sent'}).encode())

        elif self.path == '/api/public/orders':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'success': True, 'orderId': 'mock-123'}).encode())

        else:
            self.send_response(404)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'error': 'Not found'}).encode())

    def log_message(self, format, *args):
        """–û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        pass

class MockServer:
    def __init__(self, port: int = 3000):
        self.port = port
        self.server = None
        self.thread = None

    def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å mock —Å–µ—Ä–≤–µ—Ä"""
        try:
            self.server = socketserver.TCPServer(("", self.port), MockHandler)
            self.thread = threading.Thread(target=self.server.serve_forever, daemon=True)
            self.thread.start()
            print(f"üß™ Mock —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ mock —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å mock —Å–µ—Ä–≤–µ—Ä"""
        if self.server:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ mock —Å–µ—Ä–≤–µ—Ä–∞...")
            self.server.shutdown()
            self.server.server_close()
            self.server = None

def main():
    """–ó–∞–ø—É—Å–∫ mock —Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(sys.argv[1]) if len(sys.argv) > 1 else 3000

    print(f"üß™ –ó–ê–ü–£–°–ö MOCK –°–ï–†–í–ï–†–ê –ù–ê –ü–û–†–¢–£ {port}")
    print("–≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É ConsciousFunnels –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("=" * 50)

    server = MockServer(port)

    try:
        if server.start():
            # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            while True:
                time.sleep(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    finally:
        server.stop()

if __name__ == '__main__':
    main()
