#!/usr/bin/env python3
"""
üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í CONSCIOUSFUNNELS
–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤
"""

import subprocess
import sys
import time
import os

def run_test(script_name: str, description: str) -> bool:
    """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞"""
    print(f"\n{'='*60}")
    print(f"üß™ –ó–ê–ü–£–°–ö: {description}")
    print(f"üìÑ –°–∫—Ä–∏–ø—Ç: {script_name}")
    print('=' * 60)

    try:
        start_time = time.time()
        result = subprocess.run([sys.executable, script_name],
                              capture_output=True, text=True, timeout=300)

        execution_time = time.time() - start_time

        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.1f} —Å–µ–∫")
        print(f"üìä –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {result.returncode}")

        if result.stdout:
            print("\nüìù –í–´–í–û–î:")
            print(result.stdout)

        if result.stderr:
            print("\n‚ö†Ô∏è  –û–®–ò–ë–ö–ò:")
            print(result.stderr)

        success = result.returncode == 0
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"\n{status}: {description}")

        return success

    except subprocess.TimeoutExpired:
        print("‚è∞ –í–†–ï–ú–Ø –í–´–®–õ–û: –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–ª—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ")
        return False
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ù–ê–ë–û–†–ê –¢–ï–°–¢–û–í CONSCIOUSFUNNELS')
    print('=' * 60)
    print(f"üïê –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {time.strftime('%H:%M:%S %d.%m.%Y')}")
    print(f"üìç –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")

    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    tests = [
        ('check_app.py', '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'),
        ('monitor_app.py', '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è', ['--single']),
    ]

    results = []
    total_start = time.time()

    for script_name, description, *args in tests:
        if not os.path.exists(script_name):
            print(f"‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_name}")
            results.append(False)
            continue

        extra_args = args[0] if args else []
        success = run_test(script_name, description)
        results.append(success)

    # –ò–¢–û–ì–ò
    total_time = time.time() - total_start
    passed = sum(results)
    total = len(results)

    print(f"\n{'='*60}")
    print('üéØ –ò–¢–û–ì–ò –í–°–ï–• –¢–ï–°–¢–û–í:')
    print(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}")
    print(".1f"    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫")

    if passed == total:
        print('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!')
        return 0
    elif passed >= total * 0.8:
        print('\n‚ö†Ô∏è  –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û. –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.')
        return 0
    else:
        print('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫.')
        return 1

if __name__ == '__main__':
    sys.exit(main())
